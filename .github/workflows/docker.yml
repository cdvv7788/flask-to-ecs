---
name: Build a docker image and push it to AWS ECR
on:
  push:
    branches:
      - master
  #release:
  #  types: [published]

jobs:
  test:
    name: Run the tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Python 3
        uses: actions/setup-python@v1
        with:
          python-version: 3.6
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run tests
        run: python app/tests.py

  lint:
    name: Run linter for dockerfile(Hadolint)
    runs-on: ubuntu-latest
    steps:
      - name: Hadolint linting
        uses: brpaz/hadolint-action@master

  build-push:
    name: Build and push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Extract tag
        shell: bash
        run: echo "##[set-output name=release_tag;]$(echo ${GITHUB_REF#refs/tags/})"
        id: extract_tag

      - name: Build, tag, and push image to amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: github-actions-flask
          IMAGE_TAG: ${{ steps.extract_tag.outputs.release_tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - name: Logout of amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
